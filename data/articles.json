[
  {
    "id": 1,
    "title": "VPS初始设置完全指南",
    "content": "# VPS初始设置完全指南\n\n在购买VPS后，正确的初始设置对于服务器的安全和性能至关重要。本指南将带您完成VPS初始设置的所有必要步骤。\n\n## 1. 更新系统\n\n首先，我们需要确保系统是最新的：\n\n```bash\n# 对于Ubuntu/Debian系统\napt update && apt upgrade -y\n\n# 对于CentOS系统\nyum update -y\n```\n\n## 2. 创建新用户\n\n不要总是使用root用户，创建一个具有sudo权限的新用户：\n\n```bash\n# 创建新用户\nadduser username\n\n# 添加到sudo组\nusermod -aG sudo username\n\n# 切换到新用户\nsu - username\n```\n\n## 3. 配置SSH\n\n编辑SSH配置文件以提高安全性：\n\n```bash\nsudo nano /etc/ssh/sshd_config\n```\n\n修改以下设置：\n\n```\nPort 2222          # 更改默认SSH端口\nPermitRootLogin no  # 禁止root用户直接登录\nPasswordAuthentication no  # 禁用密码认证，使用密钥认证\n```\n\n重启SSH服务：\n\n```bash\nsudo systemctl restart sshd\n```\n\n## 4. 设置防火墙\n\n使用UFW（Ubuntu）或firewalld（CentOS）设置防火墙：\n\n```bash\n# Ubuntu\nsudo apt install ufw\nsudo ufw allow 2222/tcp  # 允许新的SSH端口\nsudo ufw enable\n\n# CentOS\nsudo yum install firewalld\nsudo systemctl start firewalld\nsudo systemctl enable firewalld\nsudo firewall-cmd --permanent --add-port=2222/tcp\nsudo firewall-cmd --reload\n```\n\n## 5. 安装常用软件\n\n```bash\n# Ubuntu/Debian\nsudo apt install htop fail2ban logwatch\n\n# CentOS\nsudo yum install htop fail2ban logwatch\n```\n\n## 6. 配置自动更新\n\n```bash\n# Ubuntu/Debian\nsudo apt install unattended-upgrades\nsudo dpkg-reconfigure unattended-upgrades\n```\n\n## 7. 设置时区\n\n```bash\nsudo timedatectl set-timezone Asia/Shanghai\n```\n\n## 8. 配置Swap文件（如果需要）\n\n```bash\n# 创建2GB的swap文件\nsudo fallocate -l 2G /swapfile\nsudo chmod 600 /swapfile\nsudo mkswap /swapfile\nsudo swapon /swapfile\n\n# 设置开机自动启用\necho '/swapfile none swap sw 0 0' | sudo tee -a /etc/fstab\n```\n\n## 9. 优化系统参数\n\n编辑系统参数文件：\n\n```bash\nsudo nano /etc/sysctl.conf\n```\n\n添加以下内容：\n\n```\n# 提高系统安全性\nnet.ipv4.conf.all.accept_redirects = 0\nnet.ipv4.conf.all.send_redirects = 0\nnet.ipv4.conf.all.accept_source_route = 0\n\n# 优化网络性能\nnet.core.wmem_max = 12582912\nnet.core.rmem_max = 12582912\nnet.ipv4.tcp_rmem = 10240 87380 12582912\nnet.ipv4.tcp_wmem = 10240 87380 12582912\n```\n\n应用更改：\n\n```bash\nsudo sysctl -p\n```\n\n## 10. 设置定期备份\n\n安装rsync：\n\n```bash\nsudo apt install rsync\n```\n\n创建备份脚本：\n\n```bash\nsudo nano /usr/local/bin/backup.sh\n```\n\n添加以下内容：\n\n```bash\n#!/bin/bash\nBACKUP_DIR=\"/backup\"\nDATE=$(date +%Y-%m-%d)\nmkdir -p \"$BACKUP_DIR/$DATE\"\n\n# 备份重要目录\nrsync -avz /etc \"$BACKUP_DIR/$DATE/\"\nrsync -avz /home \"$BACKUP_DIR/$DATE/\"\nrsync -avz /var/www \"$BACKUP_DIR/$DATE/\"\n\n# 删除7天前的备份\nfind \"$BACKUP_DIR\" -type d -mtime +7 -exec rm -rf {} \\;\n```\n\n设置执行权限：\n\n```bash\nsudo chmod +x /usr/local/bin/backup.sh\n```\n\n添加到crontab：\n\n```bash\nsudo crontab -e\n```\n\n添加以下行：\n\n```\n0 2 * * * /usr/local/bin/backup.sh\n```\n\n## 结论\n\n完成以上步骤后，您的VPS已经具备了基本的安全性和优化设置。根据您的具体需求，您可能还需要安装其他软件，如Web服务器、数据库等。定期检查系统更新和日志也是维护VPS的重要部分。",
    "category": "教程",
    "tags": ["VPS", "安全", "Linux", "服务器配置"],
    "excerpt": "本指南详细介绍了VPS初始设置的完整步骤，包括系统更新、用户创建、SSH配置、防火墙设置、常用软件安装等，帮助您构建一个安全、高效的VPS环境。",
    "status": "published",
    "author": "admin",
    "publishDate": "2023-10-15",
    "lastModified": "2023-10-15"
  },
  {
    "id": 2,
    "title": "在VPS上使用Docker部署应用",
    "content": "# 在VPS上使用Docker部署应用\n\nDocker已经成为现代应用部署的标准工具。本文将指导您如何在VPS上安装Docker并使用它来部署各种应用。\n\n## 安装Docker\n\n### Ubuntu/Debian系统\n\n```bash\n# 更新包索引\nsudo apt update\n\n# 安装必要的依赖\nsudo apt install -y apt-transport-https ca-certificates curl software-properties-common\n\n# 添加Docker官方GPG密钥\ncurl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -\n\n# 添加Docker仓库\nsudo add-apt-repository \"deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable\"\n\n# 更新包索引\nsudo apt update\n\n# 安装Docker\nsudo apt install -y docker-ce\n\n# 启动Docker服务\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# 将当前用户添加到docker组\nsudo usermod -aG docker $USER\n```\n\n### CentOS系统\n\n```bash\n# 安装必要的依赖\nsudo yum install -y yum-utils device-mapper-persistent-data lvm2\n\n# 添加Docker仓库\nsudo yum-config-manager --add-repo https://download.docker.com/linux/centos/docker-ce.repo\n\n# 安装Docker\nsudo yum install -y docker-ce\n\n# 启动Docker服务\nsudo systemctl start docker\nsudo systemctl enable docker\n\n# 将当前用户添加到docker组\nsudo usermod -aG docker $USER\n```\n\n## 安装Docker Compose\n\nDocker Compose是一个用于定义和运行多容器Docker应用的工具。\n\n```bash\n# 下载Docker Compose\nsudo curl -L \"https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose\n\n# 添加执行权限\nsudo chmod +x /usr/local/bin/docker-compose\n\n# 验证安装\ndocker-compose --version\n```\n\n## 部署Web应用示例\n\n### 部署Nginx\n\n```bash\n# 拉取Nginx镜像\ndocker pull nginx\n\n# 运行Nginx容器\ndocker run -d -p 80:80 --name my-nginx nginx\n```\n\n现在，您可以通过VPS的IP地址访问Nginx欢迎页面。\n\n### 部署WordPress\n\n创建一个`docker-compose.yml`文件：\n\n```bash\nmkdir wordpress && cd wordpress\nnano docker-compose.yml\n```\n\n添加以下内容：\n\n```yaml\nversion: '3'\n\nservices:\n  db:\n    image: mysql:5.7\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: somewordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n\n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    ports:\n      - \"80:80\"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db:3306\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\n    volumes:\n      - wordpress_data:/var/www/html\n\nvolumes:\n  db_data:\n  wordpress_data:\n```\n\n启动WordPress：\n\n```bash\ndocker-compose up -d\n```\n\n现在，您可以通过VPS的IP地址访问WordPress安装页面。\n\n## 使用Docker部署Node.js应用\n\n### 创建Node.js应用\n\n```bash\nmkdir node-app && cd node-app\n```\n\n创建一个简单的`app.js`文件：\n\n```javascript\nconst express = require('express');\nconst app = express();\nconst port = process.env.PORT || 3000;\n\napp.get('/', (req, res) => {\n  res.send('Hello from Docker!');\n});\n\napp.listen(port, () => {\n  console.log(`App listening at http://localhost:${port}`);\n});\n```\n\n创建`package.json`文件：\n\n```json\n{\n  \"name\": \"docker-node-app\",\n  \"version\": \"1.0.0\",\n  \"description\": \"Node.js on Docker\",\n  \"main\": \"app.js\",\n  \"scripts\": {\n    \"start\": \"node app.js\"\n  },\n  \"dependencies\": {\n    \"express\": \"^4.17.1\"\n  }\n}\n```\n\n### 创建Dockerfile\n\n```dockerfile\nFROM node:14\n\nWORKDIR /usr/src/app\n\nCOPY package*.json ./\n\nRUN npm install\n\nCOPY . .\n\nEXPOSE 3000\n\nCMD [\"npm\", \"start\"]\n```\n\n### 构建和运行Docker镜像\n\n```bash\n# 构建镜像\ndocker build -t my-node-app .\n\n# 运行容器\ndocker run -d -p 3000:3000 --name node-app my-node-app\n```\n\n现在，您可以通过`http://your-vps-ip:3000`访问您的Node.js应用。\n\n## 使用Docker部署数据库\n\n### 部署MongoDB\n\n```bash\n# 创建数据卷\ndocker volume create mongodb_data\n\n# 运行MongoDB容器\ndocker run -d \\\n  --name mongodb \\\n  -p 27017:27017 \\\n  -v mongodb_data:/data/db \\\n  -e MONGO_INITDB_ROOT_USERNAME=admin \\\n  -e MONGO_INITDB_ROOT_PASSWORD=password \\\n  mongo\n```\n\n### 部署PostgreSQL\n\n```bash\n# 创建数据卷\ndocker volume create postgres_data\n\n# 运行PostgreSQL容器\ndocker run -d \\\n  --name postgres \\\n  -p 5432:5432 \\\n  -v postgres_data:/var/lib/postgresql/data \\\n  -e POSTGRES_PASSWORD=password \\\n  -e POSTGRES_USER=admin \\\n  postgres\n```\n\n## Docker容器管理\n\n### 查看运行中的容器\n\n```bash\ndocker ps\n```\n\n### 查看所有容器（包括停止的）\n\n```bash\ndocker ps -a\n```\n\n### 启动/停止容器\n\n```bash\ndocker start container_name_or_id\ndocker stop container_name_or_id\n```\n\n### 查看容器日志\n\n```bash\ndocker logs container_name_or_id\n```\n\n### 进入容器内部\n\n```bash\ndocker exec -it container_name_or_id bash\n```\n\n## Docker网络\n\n### 创建自定义网络\n\n```bash\ndocker network create my-network\n```\n\n### 将容器连接到网络\n\n```bash\ndocker run -d --name my-app --network my-network my-image\n```\n\n## Docker安全最佳实践\n\n1. **定期更新Docker和镜像**：确保您的Docker引擎和镜像是最新的，以获取安全补丁。\n\n2. **使用官方镜像**：尽可能使用Docker Hub上的官方镜像，这些镜像通常有更好的安全性和维护。\n\n3. **限制容器资源**：使用`--memory`和`--cpu`标志限制容器可以使用的资源。\n\n4. **不要以root用户运行应用**：在Dockerfile中使用`USER`指令切换到非root用户。\n\n5. **使用Docker Content Trust**：启用Docker Content Trust以验证镜像的完整性。\n\n6. **扫描镜像中的漏洞**：使用工具如Docker Security Scanning或Clair扫描镜像中的漏洞。\n\n## 结论\n\nDocker提供了一种简单、一致的方式来部署应用，无论是简单的Web服务器还是复杂的微服务架构。通过本指南，您应该能够在VPS上使用Docker部署各种应用，并了解如何管理和保护您的Docker环境。",
    "category": "教程",
    "tags": ["Docker", "VPS", "容器化", "部署"],
    "excerpt": "本文详细介绍了如何在VPS上安装Docker并使用它来部署各种应用，包括Web服务器、WordPress、Node.js应用和数据库等，同时提供了Docker容器管理、网络配置和安全最佳实践的指导。",
    "status": "published",
    "author": "admin",
    "publishDate": "2023-10-10",
    "lastModified": "2023-10-10"
  },
  {
    "id": 3,
    "title": "5分钟搭建WordPress网站",
    "content": "# 5分钟搭建WordPress网站\n\n在这篇教程中，我们将展示如何在VPS上快速搭建一个WordPress网站，整个过程只需5分钟。\n\n## 准备工作\n\n- 一台运行Linux的VPS（本教程以Ubuntu 20.04为例）\n- 一个域名（可选，但推荐）\n- 基本的命令行知识\n\n## 方法一：使用Docker Compose（最快）\n\n这是最快的方法，适合那些已经安装了Docker和Docker Compose的用户。\n\n### 步骤1：创建项目目录\n\n```bash\nmkdir wordpress && cd wordpress\n```\n\n### 步骤2：创建docker-compose.yml文件\n\n```bash\nnano docker-compose.yml\n```\n\n添加以下内容：\n\n```yaml\nversion: '3'\n\nservices:\n  db:\n    image: mysql:5.7\n    volumes:\n      - db_data:/var/lib/mysql\n    restart: always\n    environment:\n      MYSQL_ROOT_PASSWORD: wordpress\n      MYSQL_DATABASE: wordpress\n      MYSQL_USER: wordpress\n      MYSQL_PASSWORD: wordpress\n\n  wordpress:\n    depends_on:\n      - db\n    image: wordpress:latest\n    ports:\n      - \"80:80\"\n    restart: always\n    environment:\n      WORDPRESS_DB_HOST: db:3306\n      WORDPRESS_DB_USER: wordpress\n      WORDPRESS_DB_PASSWORD: wordpress\n      WORDPRESS_DB_NAME: wordpress\n    volumes:\n      - wordpress_data:/var/www/html\n\nvolumes:\n  db_data:\n  wordpress_data:\n```\n\n### 步骤3：启动WordPress\n\n```bash\ndocker-compose up -d\n```\n\n就这么简单！现在您可以通过VPS的IP地址访问WordPress安装页面。\n\n## 方法二：使用LAMP堆栈\n\n如果您更喜欢传统的LAMP（Linux, Apache, MySQL, PHP）堆栈，请按照以下步骤操作。\n\n### 步骤1：更新系统\n\n```bash\nsudo apt update && sudo apt upgrade -y\n```\n\n### 步骤2：安装LAMP堆栈\n\n```bash\nsudo apt install apache2 mysql-server php libapache2-mod-php php-mysql php-curl php-gd php-mbstring php-xml php-xmlrpc php-soap php-intl php-zip -y\n```\n\n### 步骤3：配置MySQL\n\n```bash\nsudo mysql_secure_installation\n```\n\n按照提示设置root密码并回答安全问题（通常全部选择Y）。\n\n### 步骤4：创建WordPress数据库\n\n```bash\nsudo mysql -u root -p\n```\n\n输入您刚才设置的密码，然后执行以下SQL命令：\n\n```sql\nCREATE DATABASE wordpress DEFAULT CHARACTER SET utf8 COLLATE utf8_unicode_ci;\nCREATE USER 'wordpressuser'@'localhost' IDENTIFIED BY 'password';\nGRANT ALL ON wordpress.* TO 'wordpressuser'@'localhost';\nFLUSH PRIVILEGES;\nEXIT;\n```\n\n### 步骤5：下载并安装WordPress\n\n```bash\ncd /tmp\nwget https://wordpress.org/latest.tar.gz\ntar -xvf latest.tar.gz\nsudo mv wordpress /var/www/html/\nsudo chown -R www-data:www-data /var/www/html/wordpress/\nsudo chmod -R 755 /var/www/html/wordpress/\n```\n\n### 步骤6：配置Apache\n\n```bash\nsudo nano /etc/apache2/sites-available/wordpress.conf\n```\n\n添加以下内容：\n\n```apache\n<VirtualHost *:80>\n    ServerAdmin webmaster@localhost\n    DocumentRoot /var/www/html/wordpress\n    ServerName your-domain.com\n    ServerAlias www.your-domain.com\n\n    <Directory /var/www/html/wordpress/>\n        Options FollowSymLinks\n        AllowOverride All\n        Require all granted\n    </Directory>\n\n    ErrorLog ${APACHE_LOG_DIR}/error.log\n    CustomLog ${APACHE_LOG_DIR}/access.log combined\n</VirtualHost>\n```\n\n启用站点并重启Apache：\n\n```bash\nsudo a2ensite wordpress.conf\nsudo a2enmod rewrite\nsudo systemctl restart apache2\n```\n\n### 步骤7：完成WordPress安装\n\n在浏览器中访问您的域名或VPS IP地址，按照WordPress安装向导完成安装。\n\n## 方法三：使用一键安装脚本\n\n如果您想要更简单的方法，可以使用一键安装脚本。\n\n### 步骤1：下载脚本\n\n```bash\nwget https://raw.githubusercontent.com/teddysun/lamp/master/lamp.sh\nchmod +x lamp.sh\n```\n\n### 步骤2：运行脚本\n\n```bash\n./lamp.sh\n```\n\n按照提示进行安装，选择安装WordPress。\n\n## 安装后的优化\n\n无论您使用哪种方法安装WordPress，以下是一些安装后的优化建议：\n\n### 1. 安装SSL证书\n\n使用Let's Encrypt获取免费的SSL证书：\n\n```bash\nsudo apt install certbot python3-certbot-apache -y\nsudo certbot --apache -d your-domain.com -d www.your-domain.com\n```\n\n### 2. 安装缓存插件\n\n登录WordPress管理后台，安装并激活WP Super Cache或W3 Total Cache插件。\n\n### 3. 配置自动更新\n\n在`wp-config.php`文件中添加以下代码以启用自动更新：\n\n```php\ndefine('WP_AUTO_UPDATE_CORE', true);\n```\n\n### 4. 设置定期备份\n\n安装UpdraftPlus或BackWPup插件来设置定期备份。\n\n## 结论\n\n恭喜！您已经成功在VPS上搭建了WordPress网站。无论您选择哪种方法，整个过程都应该不超过5分钟（不包括下载时间）。现在您可以开始自定义您的WordPress网站，安装主题和插件，并开始创建内容了。",
    "category": "教程",
    "tags": ["WordPress", "VPS", "网站搭建", "Docker"],
    "excerpt": "本教程展示了三种在VPS上快速搭建WordPress网站的方法：使用Docker Compose、传统LAMP堆栈和一键安装脚本，整个过程只需5分钟，并提供了安装后的优化建议。",
    "status": "published",
    "author": "admin",
    "publishDate": "2023-10-05",
    "lastModified": "2023-10-05"
  }
]